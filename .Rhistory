#| display: FALSE
library(tidyverse)
library(knitr)
library(kableExtra)
library(descr)
library(ggplot2)
library(dbplyr)
library(ggpubr)
library(Rmisc)
library(lattice)
library(plyr)
setwd("~/Desktop/Data Programming/data_programming_notes")
happiness <-read.csv2("felicidadcis.csv")
happiness <-read.csv2("felicidadcis.csv")
View(country_final)
#| eval: TRUE
#| output: FALSE
# ============================
# Data Manipulation / Databases
# ============================
library(tidyverse)   # Collection of packages for data manipulation (dplyr, tidyr) and visualization (ggplot2)
library(dplyr)       # Data manipulation: filtering, summarizing, joining
library(plyr)        # Older data manipulation package (mostly superseded by dplyr)
library(dbplyr)      # Interface to translate dplyr syntax to SQL for databases
# ============================
# Descriptive Statistics & Visualization
# ============================
library(ggplot2)     # Flexible and powerful plotting system
library(ggpubr)      # Easy-to-use publication-ready plots with ggplot2 enhancements
library(lattice)     # Alternative plotting system for multi-panel plots
library(descr)       # Descriptive statistics: frequency tables, crosstabs
library(Rmisc)       # Utility functions for summaries: mean, SE, CI
library(knitr)       # Dynamic report generation, integration with R Markdown
library(kableExtra)  # Enhanced tables for knitr and R Markdown
# ============================
# Classical Statistics / Inference
# ============================
library(MASS)        # Classical statistics functions, distributions, datasets, LDA, etc.
library(car)         # Companion to Applied Regression: diagnostic tests, ANOVA, VIF
# ============================
# Regression & Machine Learning
# ============================
library(caret)       # Unified framework for regression, classification, and model training/tuning
library(leaps)       # Subset selection in regression: best subset, forward/backward selection
#| eval: TRUE
#| output: FALSE
# ============================
# Data Manipulation / Databases
# ============================
library(tidyverse)   # Collection of packages for data manipulation (dplyr, tidyr) and visualization (ggplot2)
library(dplyr)       # Data manipulation: filtering, summarizing, joining
library(plyr)        # Older data manipulation package (mostly superseded by dplyr)
library(dbplyr)      # Interface to translate dplyr syntax to SQL for databases
# ============================
# Descriptive Statistics & Visualization
# ============================
library(ggplot2)     # Flexible and powerful plotting system
library(ggpubr)      # Easy-to-use publication-ready plots with ggplot2 enhancements
library(lattice)     # Alternative plotting system for multi-panel plots
library(descr)       # Descriptive statistics: frequency tables, crosstabs
library(Rmisc)       # Utility functions for summaries: mean, SE, CI
library(knitr)       # Dynamic report generation, integration with R Markdown
library(kableExtra)  # Enhanced tables for knitr and R Markdown
# ============================
# Classical Statistics / Inference
# ============================
library(MASS)        # Classical statistics functions, distributions, datasets, LDA, etc.
library(car)         # Companion to Applied Regression: diagnostic tests, ANOVA, VIF
# ============================
# Regression & Machine Learning
# ============================
library(caret)       # Unified framework for regression, classification, and model training/tuning
library(leaps)       # Subset selection in regression: best subset, forward/backward selection
View(country)
#| eval: TRUE
#| output: FALSE
library(tidyverse)
library(knitr)
library(kableExtra)
library(descr)
library(ggplot2)
library(dbplyr)
library(ggpubr)
library(Rmisc)
library(lattice)
library(plyr)
country <- read.csv2("~/Desktop/Statistics/country.csv", header=TRUE)
country <- read.csv2("~/Desktop/Statistics/country.csv", header=TRUE)
country_outliers <-
country |>
filter(is.na(Gdppc_growth) == FALSE) |>
filter(is.na(net_migration_rate) == FALSE) |>
filter(is.na(Continent) == FALSE)
View(country_outliers)
#| eval: FALSE
country_time <-
country_outliers |>
filter(Year == 2022)
#| eval: FALSE
country_time <-
country_outliers |>
filter(Year == 2015)
View(country_outliers)
View(country_time)
pop_growth_bp<-ggplot(country_time,mapping=aes(y=Pop_growth))+
geom_boxplot(fill="Orange")
school_years_bp<-ggplot(country_time,mapping=aes(y=School_years))+
geom_boxplot(fill="lightblue")
life_exp_bp<-ggplot(country_time,mapping=aes(y=Life_expec))+
geom_boxplot(fill="lightgreen")
median_age_bp<-ggplot(country_time,mapping=aes(y=Median_age))+
geom_boxplot(fill="red")
ggarrange(pop_growth_bp, school_years_bp, life_exp_bp, median_age_bp,
ncol = 2, nrow = 2)
country_na <-
country |>
filter(is.na(Gdppc_growth) == FALSE) |>
filter(is.na(net_migration_rate) == FALSE) |>
filter(is.na(Continent) == FALSE)
#| eval: FALSE
country_time <-
country_na |>
filter(Year == 2015)
bxp<-ggplot(country_time,mapping=aes(x=Pop_growth)) +
geom_bar(fill="Orange")
dp<-ggplot(country_time,mapping=aes(x=Median_age)) +
geom_bar(fill="lightblue")
ggarrange(bxp, dp,
ncol = 2, nrow = 1)
country_na <-
country |>
filter(is.na(Gdppc_growth) == FALSE) |>
filter(is.na(net_migration_rate) == FALSE) |>
filter(is.na(Continent) == FALSE)
country_time <-
country_na |>
filter(Year == 2015)
bxp<-ggplot(country_time,mapping=aes(x=Gdppc_growth)) +
geom_bar(fill="Orange")
ggarrange(bxp, dp,
ncol = 1, nrow = 1)
table(country_time$Continent)
pop_growth_bp<-ggplot(country_time,mapping=aes(y=Pop_growth))+
geom_boxplot(fill="Orange")
school_years_bp<-ggplot(country_time,mapping=aes(y=School_years))+
geom_boxplot(fill="lightblue")
life_exp_bp<-ggplot(country_time,mapping=aes(y=Life_expec))+
geom_boxplot(fill="lightgreen")
median_age_bp<-ggplot(country_time,mapping=aes(y=Median_age))+
geom_boxplot(fill="red")
ggarrange(pop_growth_bp, school_years_bp, life_exp_bp, median_age_bp,
ncol = 2, nrow = 2)
socioecom_summary <-country_time |>
summarise_at(vars(Pop_growth, School_years, Life_expec, Median_age), # variables from happiness to income
list(avg=mean, std=sd))  # you can include more measures
data_df_summary
gdpfreq<-freq(ordered(country_time$Gdppc_growth),plot=T)
? freq
gdpfreq<-freq(ordered(country_time$Gdppc_growth),plot=F)
gdpfreq<-freq(ordered(country_time$Gdppc_growth),plot=T)
ggplot(country_time, aes(x = value)) +
geom_histogram(bins=10, fill="lightblue",
color="black")
ggplot(country_time, aes(x = Gdppc_growth)) +
geom_histogram(bins=10, fill="lightblue",
color="black")
pop_growth_bp<-ggplot(country_time,mapping=aes(y=Pop_growth))+
geom_boxplot(fill="Orange")
school_years_bp<-ggplot(country_time,mapping=aes(y=School_years))+
geom_boxplot(fill="lightblue")
life_exp_bp<-ggplot(country_time,mapping=aes(y=Life_expec))+
geom_boxplot(fill="lightgreen")
median_age_bp<-ggplot(country_time,mapping=aes(y=Median_age))+
geom_boxplot(fill="red")
ggarrange(pop_growth_bp, school_years_bp, life_exp_bp, median_age_bp,
ncol = 2, nrow = 2)
socioecon_summary <-country_time |>
summarise_at(vars(Pop_growth, School_years, Life_expec, Median_age),
list(avg=mean, std=sd))
socioecon_summary
ConTtable<-table(country_time$Gdppc_growth, country_time$net_migration_rate)
ConTtable
# group GDP
country_time$Gdppc_growth<-case_when(
(country_time$Gdppc_growth >= -24 & < -21.6) ~ "-24 to -21.6",
# group GDP
country_time$Gdppc_growth<-case_when(
(country_time$Gdppc_growth >= -24 && < -21.6) ~ "-24 to -21.6",
country_time |>
summarise(
cor_gdp_mig = cor(Gdppc_growth, net_migration_rate, use = "complete.obs")
)
ggplot(country_time, aes(x = Gdppc_growth, y = net_migration_rate)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE) +
labs(x = "GDP per capita growth (%)",
y = "Net migration rate",
title = "Relationship between GDP growth and net migration rate")
#| eval: TRUE
#| output: FALSE
# ============================
# Data Manipulation / Databases
# ============================
library(tidyverse)   # Collection of packages for data manipulation (dplyr, tidyr) and visualization (ggplot2)
library(dplyr)       # Data manipulation: filtering, summarizing, joining
library(plyr)        # Older data manipulation package (mostly superseded by dplyr)
library(dbplyr)      # Interface to translate dplyr syntax to SQL for databases
# ============================
# Descriptive Statistics & Visualization
# ============================
library(ggplot2)     # Flexible and powerful plotting system
library(ggpubr)      # Easy-to-use publication-ready plots with ggplot2 enhancements
library(lattice)     # Alternative plotting system for multi-panel plots
library(descr)       # Descriptive statistics: frequency tables, crosstabs
library(Rmisc)       # Utility functions for summaries: mean, SE, CI
library(knitr)       # Dynamic report generation, integration with R Markdown
library(kableExtra)  # Enhanced tables for knitr and R Markdown
# ============================
# Classical Statistics / Inference
# ============================
library(MASS)        # Classical statistics functions, distributions, datasets, LDA, etc.
library(car)         # Companion to Applied Regression: diagnostic tests, ANOVA, VIF
# ============================
# Regression & Machine Learning
# ============================
library(caret)       # Unified framework for regression, classification, and model training/tuning
library(leaps)       # Subset selection in regression: best subset, forward/backward selection
dataseniors<-read.csv2("seniors2.csv", sep=";", dec=",")#read data
data.df<-data.frame(dataseniors[1:310,1:31])#data frame(rectangular data structures)
View(dataseniors)
#| eval: FALSE
ConTtable<-table(country_time$Gdppc_growth, country_time$net_migration_rate)
#| eval: TRUE
#| output: FALSE
library(tidyverse)
library(knitr)
library(kableExtra)
library(descr)
library(ggplot2)
library(dbplyr)
library(ggpubr)
library(Rmisc)
library(lattice)
library(plyr)
country <- read.csv2("~/Desktop/Statistics/country.csv", header=TRUE)
View(country)
country <- read.csv2("~/Desktop/Statistics/mxmh_survey_results.csv", header=TRUE)
music <- read.csv2("~/Desktop/Statistics/mxmh_survey_results.csv", header=TRUE)
View(music)
mxmh_survey_results <- read.csv("~/Desktop/Statistics/mxmh_survey_results.csv")
View(mxmh_survey_results)
music <- read.csv2("~/Desktop/Statistics/mxmh_survey_results.csv", header=TRUE)
music <- read.csv2("~/Desktop/Statistics/mxmh_survey_results.csv", header=TRUE)
View(music)
music <- read.csv2("~/Desktop/Statistics/mxmh_survey_results.csv")
#| eval: TRUE
#| output: FALSE
library(tidyverse)
library(knitr)
library(kableExtra)
library(descr)
library(ggplot2)
library(dbplyr)
library(ggpubr)
library(Rmisc)
library(lattice)
library(plyr)
music <- read.csv2("~/Desktop/Statistics/mxmh_survey_results.csv"
View(mxmh_survey_results)
music <- mxmh_survey_results
? read_csv2
? read.csv2
music <- read.csv2("~/Desktop/Statistics/mxmh_survey_results.csv", header=TRUE, sep=",")
View(music)
bxp_age<-ggplot(music,mapping=aes(y=Age))+
geom_boxplot(fill="Orange") +
ylim(c(0,12))
ggarrange(bxp_age
ncol = 1, nrow = 1)
bxp_age<-ggplot(music,mapping=aes(y=Age))+
geom_boxplot(fill="Orange")
ggarrange(bxp_age,
ncol = 1, nrow = 1)
bxp_age<-ggplot(music,mapping=aes(y=Age))+
geom_boxplot(fill="Orange")
freq_genre <- table(music$Fav.genre)
ggarrange(bxp_age,
ncol = 2, nrow = 1)
freq_genre <- table(music$Fav.genre)
freq_genre <- table(music$Fav.genre)
freq_genre
bxp_age<-ggplot(music,mapping=aes(y=Age))+
geom_boxplot(fill="Orange")
ggarrange(bxp_age,
ncol = 1, nrow = 1)
age_summary <- music |>
summarise_at(vars(Age),
list(avg=mean, std=sd))
data_df_summary
bxp_age<-ggplot(music,mapping=aes(y=Age))+
geom_boxplot(fill="Orange")
ggarrange(bxp_age,
ncol = 1, nrow = 1)
age_summary <- music |>
summarise_at(vars(Age),
list(avg=mean, std=sd))
age_summary
bxp_age<-ggplot(music,mapping=aes(y=Age))+
geom_boxplot(fill="Orange")
ggarrange(bxp_age,
ncol = 1, nrow = 1)
age_summary <- music |>
summarise_at(vars(Age),
list(avg=mean))
age_summary
bxp_age<-ggplot(music,mapping=aes(y=Age))+
geom_boxplot(fill="Orange")
ggarrange(bxp_age,
ncol = 1, nrow = 1)
age_summary <- music |>
summarise_at(vars(Age),
list(avg = ~mean(., na.rm = TRUE)))
age_summary
bxp_age<-ggplot(music,mapping=aes(y=Age))+
geom_boxplot(fill="Orange")
ggarrange(bxp_age,
ncol = 1, nrow = 1)
age_summary <- music |>
summarise_at(vars(Age),
list(avg = ~mean(., na.rm = TRUE),              min = ~min(., na.rm = TRUE),
max = ~max(., na.rm = TRUE)))
age_summary
freq_instrumentalist <- table(music$Instrumentalist)
freq_instrumentalist
freq_composer <- table(music$Composer)
freq_composer
freq_anxiety <- freq(ordered(music$Anxiety),plot=T)
bxp_age<-ggplot(music,mapping=aes(y=Age))+
geom_boxplot(fill="Orange")
age_summary <- music |>
summarise_at(vars(Age),
list(
avg = ~mean(., na.rm = TRUE),
min = ~min(., na.rm = TRUE),
max = ~max(., na.rm = TRUE),
median = ~median(., na.rm = TRUE)
)
)
age_summary
freq_anxiety <- freq(ordered(music$Anxiety),plot=T)
freq_depression <- freq(ordered(music$Depression),plot=T)
ggarrange(freq_anxiety,
ncol = 2, nrow = 1)
freq_anxiety <- freq(ordered(music$Anxiety),plot=T)
freq_depression <- freq(ordered(music$Depression),plot=T)
ggarrange(freq_anxiety, freq_depression,
ncol = 2, nrow = 1)
freq_streaming <- freq(ordered(music$Primary.streaming.service),plot=T)
freq_streaming <- freq(ordered(music$Primary.streaming.service))
freq_streaming
freq_streaming <- table(music$Primary.streaming.service)
freq_streaming
bar_hours<-ggplot(music, mapping=aes(x=Hours.per.day)) +
geom_bar(fill="Orange")
ggarrange(bar_hours,
ncol = 1, nrow = 1)
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(avg=mean, std=sd, med=median))
data_df_summary
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(avg=mean, std=sd, median=med))
? list
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(avg=mean, std=sd, median=median))
data_df_summary
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(avg=mean, std=sd, median=median))
hours_summary
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE)
))
hours_summary
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE)
))
hours_summary
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE)
))
hours_summary
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE)
))
hours_summary
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = mean,
median = median)
))
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = mean,
median = median,)
))
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = mean,
median = median)
))
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = mean,
median = median))
hours_summary
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE)
))
hours_summary
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = ~mean(., na.rm = FALSE),
median = ~median(., na.rm = TRUE)
))
hours_summary
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE)
))
hours_summary
View(music)
music$Hours.per.day <- as.integer(music$Hours.per.day)
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE)
))
hours_summary
ConTtable<-table(music$Primary.streaming.service, music$Hours.per.day)
ConTtable
ConTtable<-table(music$Hours.per.day, music$Primary.streaming.service)
ConTtable
ConTtable<-table(music$Primary.streaming.service, music$Hours.per.day)
ConTtable
RConTtable<-prop.table(ConTtable)*100
round(RConTtable, 3)
CConTtableG<-prop.table(ConTtable,margin=2)*100
CConTtableG
music$Hours.per.day <- as.integer(music$Hours.per.day)
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
max = max,
))
music$Hours.per.day <- as.integer(music$Hours.per.day)
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
max = ~max(., na.rm = TRUE),
))
music$Hours.per.day <- as.integer(music$Hours.per.day)
hours_summary <- music |>
summarise_at(vars(Hours.per.day),
list(
avg = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
max = ~max(., na.rm = TRUE)
))
hours_summary
CConTtableG<-prop.table(ConTtable)*100
CConTtableG
CConTtableG<-prop.table(ConTtable,margin=2)*100
round(CConTtableG, 3)
CConTtableG<-prop.table(ConTtable,margin=2)*100
round(CConTtableG, 0)
CConTtableG<-prop.table(ConTtable,margin=1)*100
round(CConTtableG, 3)
? prop.table
CConTtableG<-prop.table(ConTtable,margin=5)*100
CConTtableG<-prop.table(ConTtable,margin=3)*100
CConTtableG<-prop.table(ConTtable,margin=2)*100
round(CConTtableG, 3)
