---
title: "October 9th"
format: html
editor: visual
---

## Flow Structures (cont.)

```{r}
x = rnorm(n = 1)
```

**This is the normal way to write conditionals in R base:**

if(condition) {

all the code you want to run when condition is TRUE

} else {

all the code you want to run when condition is FALSE

}

```{r}
if (TRUE) {
  x
} else {
  2*x
}
```

Returns value of X

```{r}
if (TRUE) {
  x
} else {
  2*y
}
```

TRUE because X is X. But incorrect because y is not defined

```{r}
#| eval: FALSE
if (TRUE) {
  y
} else {
  2*x
}
```

Error because y is not defined

### Nested If-Else

Design a conditional if-else

if x \> 0 –\> modify the value by multiplying by 2

if x \< 0 —\> modify the value by dividing by 3

else —\> modify the value by making it 12345

```{r}
if (x > 0) {
  x <- x*2
} else {
  if (x < 0) {
    x <- x / 3
  } else {
    x <- 12345
  }
}
```

OR

```{r}
if (x > 0) {
  x <- x*2
} else if (x < 0) {
    x <- x / 3
  } else {
    x <- 12345
  }
```

(one less set of curly brackets)

### Tidyverse If-Else

Create a new variable "human_or_not"

If species is human —\> human

otherwise —\> other weird animal

```{r}
library(tidyverse)
starwars |>
  mutate("human_or_not" = if_else(
    species == "Human", "human",
    "other weird animal",
    missing = "other weird animal"))
```

if_else(condition, TRUE, FALSE, missing)

### Multiple If-Else in Tidyverse

```{r}
starwars |>
  mutate("human_or_not" = if_else(
    species == "Human", "human", 
    if_else(name == "Jabba Desilijic Tiure", "babosa asquerosa",
    "other weird animal"),
    missing = "other weird animal"))
```

You can also use str_detect

```{r}
starwars |>
  mutate("human_or_not" = if_else(
    species == "Human", "human", 
    if_else(str_detect(name, "Jabba"), "babosa asquerosa",
    "other weird animal"),
    missing = "other weird animal"))
```

### Alternative to If_Else

```{r}
starwars |>
  mutate("human_or_not" =
           case_when(
             species == "Human" ~ "human",
             name == "Jabba Desilijic Tiure" ~ "babosa asquerosa",
             TRUE ~ "other weird animal"
           ))
```

OR

```{r}
starwars |>
  mutate("human_or_not" =
           case_when(
             species == "Human" ~ "human",
             str_detect(name, "Jabba") ~ "babosa asquerosa",
             is.na(species) ~ NA_character_,
             TRUE ~ "other weird animal"
           ))
```

case_when(

condition1 \~ value when condition is true,

condition2 \~ value when condition is true,

condition3 \~ value when condition is true,

condition4 \~ value when condition is true,

TRUE \~ value when rest are false)

It evaluates in a sequential way, so if condition 1 is true, it will not arrive to condition 2. Condition 1-3 need to be false in order for condition 4 to run.

### [Exercise 7](https://javieralvarezliebana.es/docencia/mucss-data-programming/slides/#/tu-turno-3-2)

```{r}
starwars |>
  mutate("BMI" = (mass / ((height / 100))^2)) |>
  mutate(
    "qualify_weight" = 
      case_when(
        species != "Human" ~ NA_character_,
        BMI < 18 ~ "underweight",
        BMI < 30 ~ "normal",
        BMI > 30 ~ "overweight"
      )
  )
```

```{r}
starwars
```

### Frequency Table of Variable Sex

```{r}
starwars |>
  count(sex)
```

Creates a frequency table.

```{r}
starwars |>
  count(sex, sort = TRUE)
```

Sorts by largest number first. The output is a tibble, meaning we can apply functions to the tibble. Frequency tables are a kind of summary table.

```{r}
starwars |>
  count(sex, gender, sort = TRUE)
```

The above is a bivariate summary table.

```{r}
starwars |>
  summarize("mean_mass" = mean(mass, na.rm = TRUE))
```

The above generates summary statistics for the mean of mass.

```{r}
starwars |>
  mutate("mean_mass" = mean(mass, na.rm = TRUE))
```

Don't use mean with mutate because it will add a column with the value of the mean.

```{r}
starwars |>
  drop_na(mass) |>
  summarize("mean_mass" = mean(mass),
         "median_mass" = median(mass),
         "var_mass" = var(mass),
         "sd_mass" = sd(mass),
         "se_mass" = sd_mass/sqrt(n())
         )
```

You can add as many summary statistics as you'd like to the table.
